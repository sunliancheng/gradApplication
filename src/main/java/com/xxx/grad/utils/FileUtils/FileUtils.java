package com.xxx.grad.utils.FileUtils;

import com.xxx.grad.utils.SqlUtils;
import com.xxx.grad.utils.TimeUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.sql.ResultSet;

@Component
public class FileUtils {

    public static String packagePath = "./src/main/java/com/xxx/grad/";

    @Autowired
    private SqlUtils sqlUtils;

    /**
     * 根据表名，生成对应都PO对象 即 entity 实例
     * @param tableName
     */
    public void describeTable(String tableName) {

        String sql = "describe " + tableName + ";";
        StringBuilder sb = new StringBuilder();
        try {
            ResultSet resultSet = sqlUtils.executeQuery(sql);

            System.out.println("********************************");
            System.out.println();

            sb.append("package com.xxx.grad.entity;\n" +
                    "\n" +
                    "import lombok.*;\n" +
                    "\n" +
                    "/**\n" +
                    " * this class code is automatically generated by the tool \"Table2Entity\";\n" +
                    " * the tool is for fast generating entity according to Database table;\n" +
                    " * \n" +
                    " * the purpose of the tool is to better help my girlfriend to faster finish her graduation design;\n" +
                    " * \n" +
                    " * @Author: Simin Wang\n" +
                    " * @Tool_Created_Date: 4/29/2021 2:56 AM\n" +
                    " * @Code_Generated_Date: " + TimeUtils.getCurTime() + " \n" +
                    " */\n" +
                    "\n" +
                    "@Data\n" +
                    "public class "  + tableName.substring(0, 1).toUpperCase() + tableName.substring(1) +  " { \n");

            while (resultSet.next()) {

                String fieldId = resultSet.getString("Field");
                String type = resultSet.getString("Type");
                String isNull = resultSet.getString("Null");
                if (isNull.equals("NO")) {
                    sb.append("\n" + "    @NonNull");
                }
                if (type.startsWith("bigint")) {
                    sb.append("\n" + "    private Long " + fieldId + ";");
                } else if (type.startsWith("int")) {
                    sb.append("\n" + "    private Integer " + fieldId + ";");
                } else if (type.startsWith("varchar")) {
                    sb.append("\n" + "    private String " + fieldId + ";");
                } else {
                    sb.append("\n" + "    private String " + fieldId + ";");
                }
                sb.append("\n");
            }

            System.out.println("Have successfully created entity from table: " + tableName);

            System.out.println();
            System.out.println("********************************");


            sb.append("\n" + "}");
            writeEntity(sb.toString(), tableName.substring(0, 1).toUpperCase() + tableName.substring(1));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void writeEntity(String clazz, String fileName)  {

        String path = "./src/main/java/com/xxx/grad/entity/";
        File file = new File(path + fileName + ".java");

        if (file.exists()) {
            System.out.println(fileName + " java class exist");
            return;
        }

        if(!file.getParentFile().exists()) file.getParentFile().mkdirs();

        try {
            Writer out = new FileWriter(file);
            out.write(clazz);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 把所有数据库 grad 数据库中都所有表格找出来，并创建对应都实体类
     * @return
     */
    public void createBeanServiceMapper() {
        String sql = "show tables";
        try {
            ResultSet resultSet = sqlUtils.executeQuery(sql);
            while (resultSet.next()) {
                String tableName = resultSet.getString("Tables_in_grad");
                String className = tableName.substring(0,1).toUpperCase() + tableName.substring(1);
                describeTable(tableName);
                writeMPMapper(className);
                writeService(className);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 把java文件写入com.xxx.grad下面的某个包中
     * @param calzz
     * @param fileName
     * @param path
     */
    public static void writeJavaClass(String clazz, String fileName, String path) {
        try {
            File file = new File(packagePath + path + fileName + ".java");
            if (file.exists()) {
                System.out.println(fileName + " java class exist");
                return;
            }
            Writer writer = new FileWriter(file);
            writer.write(clazz);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 自动写入 mybatis plus 的 mapper
     * @param type class类型
     * @param fileName
     */
    public static void writeMPMapper(String type) {
        String clazz = "package com.xxx.grad.mapper;\n" +
                "\n" +
                "import com.baomidou.mybatisplus.core.mapper.BaseMapper;\n" +
                "import com.xxx.grad.entity.*;\n" +
                "\n" +
                "public interface "  + type + "Mapper extends BaseMapper<" + type + "> {\n" +
                "    \n" +
                "}\n";
        writeJavaClass(clazz, type + "Mapper", "mapper/");
    }

    /**
     * 自动生成service层
     * @param type
     */
    public static void writeService(String type) {
        StringBuilder sb = new StringBuilder();

        String mapper = type.substring(0,1).toLowerCase() + type.substring(1) + "Mapper";
        /**
         * generate package
         */
        sb.append(SBHelper.PACKAGE + SBHelper.SPACE + "com.xxx.grad.service" + SBHelper.SEMICOLON + SBHelper.NEXTLINE);
        sb.append(SBHelper.NEXTLINE);

        /**
         * generate import
         */
        sb.append("import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n" +
                "import com.xxx.grad.entity.*;\n" +
                "import com.xxx.grad.mapper.*;\n" +
                "import org.springframework.beans.factory.annotation.Autowired;\n" +
                "import org.springframework.stereotype.*;\n" +
                "import java.util.*; \n");

        sb.append(SBHelper.NEXTLINE + SBHelper.COMPONENT);

        /**
         * generate class name
         */
        sb.append(SBHelper.PUBLIC + SBHelper.SPACE + SBHelper.CLASS + SBHelper.SPACE + type + "Service " + SBHelper.LEFTBIGBRACKETS + SBHelper.NEXTLINE + SBHelper.NEXTLINE);

        /**
         * generate mapper
         */
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.AUTOWIRED);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.PRIVATE + SBHelper.SPACE + type + "Mapper " + mapper + SBHelper.SEMICOLON + SBHelper.NEXTLINE + SBHelper.NEXTLINE);

        /**
         * generate select function
         */
        sb.append(geneSelectFunc("select", "List<" + type + SBHelper.BIGGER, "QueryWrapper<" + type + "> queryWrapper", mapper));

        /**
         * generate delete function
         */
        sb.append(geneDeleteFunc("delete", "int", "QueryWrapper<" + type + "> queryWrapper", mapper));

        /**
         * generate update function
         */
        sb.append(geneUpdateFunc("update", "int", type + SBHelper.SPACE + type.substring(0,1).toLowerCase() + type.substring(1) + ", QueryWrapper<" + type + "> queryWrapper", mapper));

        /**
         * generate insert function
         */
        sb.append(geneInsertFunc("insert", "int", type + SBHelper.SPACE + type.substring(0,1).toLowerCase() + type.substring(1), mapper));

        /**
         * generate final character
         */
        sb.append(SBHelper.NEXTLINE + SBHelper.RIGHTBIGBRACKETS + SBHelper.NEXTLINE);



        writeJavaClass(sb.toString(), type + "Service", "service/");
    }

    public static String geneSelectFunc(String funName, String returnType, String args, String mapper) {
        StringBuilder sb = new StringBuilder();
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.PUBLIC + SBHelper.SPACE + returnType + SBHelper.SPACE + funName + SBHelper.LEFTSMALLBRACKETS + args + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SPACE + SBHelper.LEFTBIGBRACKETS);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(8) + SBHelper.RETURN + SBHelper.SPACE + mapper + SBHelper.POINT + "selectList(" + args.split(" ")[1] + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SEMICOLON);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.RIGHTBIGBRACKETS + SBHelper.NEXTLINE);
        return sb.toString();
    }

    public static String geneDeleteFunc(String funName, String returnType, String args, String mapper) {
        StringBuilder sb = new StringBuilder();
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.PUBLIC + SBHelper.SPACE + returnType + SBHelper.SPACE + funName + SBHelper.LEFTSMALLBRACKETS + args + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SPACE + SBHelper.LEFTBIGBRACKETS);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(8) + SBHelper.RETURN + SBHelper.SPACE + mapper + SBHelper.POINT + "delete(" + args.split(" ")[1] + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SEMICOLON);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.RIGHTBIGBRACKETS + SBHelper.NEXTLINE);
        return sb.toString();
    }

    public static String geneUpdateFunc(String funName, String returnType, String args, String mapper) {
        String[] splits = args.split(",");
        StringBuilder sb = new StringBuilder();
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.PUBLIC + SBHelper.SPACE + returnType + SBHelper.SPACE + funName + SBHelper.LEFTSMALLBRACKETS + args + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SPACE + SBHelper.LEFTBIGBRACKETS);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(8) + SBHelper.RETURN + SBHelper.SPACE + mapper + SBHelper.POINT + "update(" + splits[0].split(" ")[1] + SBHelper.COMMA + SBHelper.SPACE + splits[1].split(" ")[2] + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SEMICOLON);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.RIGHTBIGBRACKETS + SBHelper.NEXTLINE);
        return sb.toString();
    }

    public static String geneInsertFunc(String funName, String returnType, String args, String mapper) {
        StringBuilder sb = new StringBuilder();
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.PUBLIC + SBHelper.SPACE + returnType + SBHelper.SPACE + funName + SBHelper.LEFTSMALLBRACKETS + args + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SPACE + SBHelper.LEFTBIGBRACKETS);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(8) + SBHelper.RETURN + SBHelper.SPACE + mapper + SBHelper.POINT + "insert(" + args.split(" ")[1] + SBHelper.RIGHTSMALLBRACKETS + SBHelper.SEMICOLON);
        sb.append(SBHelper.NEXTLINE);
        sb.append(SBHelper.getNSpaceChar(4) + SBHelper.RIGHTBIGBRACKETS + SBHelper.NEXTLINE);
        return sb.toString();
    }
}